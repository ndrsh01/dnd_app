import SwiftUI

struct CharacterView: View {
    @StateObject private var characterStore = CharacterStore()
    @StateObject private var compendiumStore = CompendiumStore()
    @StateObject private var classesStore = ClassesStore()
    
    var body: some View {
        NavigationView {
            Group {
                if let selectedCharacter = characterStore.selectedCharacter {
                    CompactCharacterSheetView(
                        character: selectedCharacter,
                        store: characterStore,
                        compendiumStore: compendiumStore,
                        classesStore: classesStore,
                        isEditingMode: .constant(false),
                        onSaveChanges: { updatedCharacter in
                            characterStore.update(updatedCharacter)
                        }
                    )
                } else {
                    // –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    CharacterSelectionView(
                        characterStore: characterStore,
                        isPresented: .constant(true)
                    )
                }
            }
            .navigationTitle("–ü–µ—Ä—Å–æ–Ω–∞–∂")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    if characterStore.selectedCharacter != nil {
                        Button("–ù–∞–∑–∞–¥") {
                            characterStore.selectedCharacter = nil
                        }
                    }
                }
            }
        }
        .onAppear {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            print("üîç [CharacterView] onAppear - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            classesStore.loadClasses()
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                classesStore.loadClassTables()
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                print("üîç [CharacterView] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ClassesStore:")
                print("  - classesBySlug: \(classesStore.classesBySlug.keys.sorted())")
                print("  - classTablesBySlug: \(classesStore.classTablesBySlug.keys.sorted())")
                print("  - isLoading: \(classesStore.isLoading)")
                
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                if classesStore.classesBySlug.isEmpty || classesStore.classTablesBySlug.isEmpty {
                    print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                    classesStore.loadClasses()
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                        classesStore.loadClassTables()
                    }
                }
            }
        }
    }
}

struct CharacterView_Previews: PreviewProvider {
    static var previews: some View {
        CharacterView()
    }
}
