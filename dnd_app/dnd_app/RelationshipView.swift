import SwiftUI

// MARK: - Model

struct Person: Identifiable, Codable, Equatable, Hashable {
    var id: UUID = UUID()
    var name: String
    var details: String
    var hearts: Int // -7 –¥–æ +7, –≥–¥–µ 0 = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ

    static let maxHearts = 7
    static let minHearts = -7
    
    var isPositive: Bool {
        return hearts > 0
    }
    
    var isNegative: Bool {
        return hearts < 0
    }
    
    var isNeutral: Bool {
        return hearts == 0
    }
    
    var displayValue: Int {
        return abs(hearts)
    }
}

// MARK: - Store

final class RelationshipStore: ObservableObject {
    @Published var people: [Person] = [] {
        didSet { save() }
    }

    private let key = "relationships_v3"

    init() {
        load()
        if people.isEmpty {
            people = [
                Person(name: "–õ—É–Ω–∞", details: "–Ω–æ—Ä–º —á–µ–ª, —Ä–µ—Å–ø–µ–∫—Ç—É—é –µ–º—É", hearts: 3),
                Person(name: "–ß–∞—Ç—É—Ä—É", details: "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø", hearts: -2),
                Person(name: "–õ—é–º–µ", details: "–≥–æ–≤–æ—Ä–∏—Ç –∑–¥—Ä–∞–≤—ã–µ –≤–µ—â–∏", hearts: 5),
                Person(name: "–ì–∞—Ä—Ä–∏", details: "—à—É—Ç—ã –∏ —Ö–∞–æ—Å", hearts: 1)
            ]
        }
    }

    func add(_ p: Person) { people.append(p) }
    func remove(at offsets: IndexSet) { people.remove(atOffsets: offsets) }
    func update(_ p: Person) {
        DispatchQueue.main.async {
            if let idx = self.people.firstIndex(where: { $0.id == p.id }) {
                self.people[idx] = p
            }
        }
    }

    private func save() {
        do {
            let data = try JSONEncoder().encode(people)
            UserDefaults.standard.set(data, forKey: key)
        } catch {
            print("‚ùå Failed to encode relationships: \(error)")
        }
    }

    private func load() {
        guard let data = UserDefaults.standard.data(forKey: key) else { return }
        do {
            people = try JSONDecoder().decode([Person].self, from: data)
        } catch {
            print("‚ùå Failed to decode relationships: \(error)")
        }
    }
}

// MARK: - View

struct RelationshipView: View {
    @StateObject private var store = RelationshipStore()
    @State private var showingAdd = false
    @State private var editing: Person? = nil
    @Namespace private var ns

    var body: some View {
        NavigationStack {
            ZStack {
                // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
                Color(hex: "#fceeda")
                .ignoresSafeArea()

                Group {
                    if store.people.isEmpty {
                        VStack(spacing: 30) {
                            Spacer()
                            
                            Image(systemName: "person.2.slash")
                                .font(.system(size: 80))
                                .foregroundColor(.orange)
                                .shadow(color: .orange.opacity(0.3), radius: 10)
                            
                            VStack(spacing: 16) {
                                Text("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
                                    .font(.system(.largeTitle, design: .rounded))
                                    .fontWeight(.bold)
                                
                                Text("–î–æ–±–∞–≤—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –≤—Ä–∞–≥–æ–≤, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—Ä–æ–≤–Ω–µ–º —Å–∏–º–ø–∞—Ç–∏–∏")
                                    .font(.system(.body, design: .rounded))
                                    .foregroundStyle(.secondary)
                                    .multilineTextAlignment(.center)
                                    .padding(.horizontal, 40)
                            }
                            
                            Button(action: { showingAdd = true }) {
                                HStack(spacing: 12) {
                                    Image(systemName: "plus.circle.fill")
                                        .font(.title2)
                                    Text("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
                                        .font(.system(.body, design: .rounded))
                                        .fontWeight(.semibold)
                                }
                                .foregroundColor(.white)
                                .padding(.horizontal, 24)
                                .padding(.vertical, 16)
                                .background(
                                    LinearGradient(
                                        colors: [Color.orange, Color.orange.opacity(0.8)],
                                        startPoint: .leading,
                                        endPoint: .trailing
                                    )
                                )
                                .cornerRadius(25)
                                .shadow(color: Color.orange.opacity(0.3), radius: 10, x: 0, y: 5)
                            }
                            
                            Spacer()
                        }
                    } else {
                        List {
                            ForEach(store.people) { person in
                                PersonCard(person: person) { updated in
                                        store.update(updated)
                                }
                                .listRowSeparator(.hidden)
                                .listRowBackground(Color.clear)
                                .padding(.vertical, 4)
                            }
                            .onDelete(perform: store.remove)
                        }
                        .listStyle(PlainListStyle())
                        .background(Color.clear)
                    }
                }
            }
            .navigationTitle("üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { showingAdd = true }) {
                        Image(systemName: "plus.circle.fill")
                            .font(.title2)
                            .foregroundColor(.orange)
                    }
                }
            }
            .sheet(isPresented: $showingAdd) {
                AddPersonView { person in
                    store.add(person)
                    showingAdd = false
                }
            }
        }
    }
}

// MARK: - Person Card Component
struct PersonCard: View {
    let person: Person
    let onUpdate: (Person) -> Void
    
    @State private var isEditing = false
    @State private var editedName: String
    @State private var editedDetails: String
    @State private var editedHearts: Int
    
    init(person: Person, onUpdate: @escaping (Person) -> Void) {
        self.person = person
        self.onUpdate = onUpdate
        self._editedName = State(initialValue: person.name)
        self._editedDetails = State(initialValue: person.details)
        self._editedHearts = State(initialValue: person.hearts)
    }

    var body: some View {
        ZStack(alignment: .topTrailing) {
            VStack(alignment: .leading, spacing: isEditing ? 24 : 16) {

        VStack(alignment: .leading, spacing: isEditing ? 20 : 16) {
                    if isEditing {
                    // –ü–æ–ª–µ –∏–º–µ–Ω–∏
                        TextField("–ò–º—è", text: $editedName)
                            .font(.system(.title2, design: .rounded))
                            .fontWeight(.bold)
                            .padding(.horizontal, 16)
                            .padding(.vertical, 14)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color(.systemBackground))
                                    .stroke(Color.orange, lineWidth: 2)
                                    .shadow(color: Color.orange.opacity(0.2), radius: 8, x: 0, y: 2)
                            )
                        
                    // –ü–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                    TextField("–û–ø–∏—Å–∞–Ω–∏–µ", text: $editedDetails, axis: .vertical)
                            .font(.system(.body, design: .rounded))
                            .padding(.horizontal, 16)
                            .padding(.vertical, 14)
                            .lineLimit(4...15)
                            .frame(minHeight: 120)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color(.systemBackground))
                                    .stroke(Color.orange, lineWidth: 2)
                                    .shadow(color: Color.orange.opacity(0.2), radius: 8, x: 0, y: 2)
                            )
                    } else {
                        Text(person.name)
                            .font(.system(.title3, design: .rounded))
                            .fontWeight(.bold)
                            .foregroundColor(.primary)
                    
                        Text(person.details)
                            .font(.system(.body, design: .rounded))
                            .foregroundColor(.secondary)
                            .frame(maxWidth: .infinity, alignment: .leading)
                }
                
                // –°–∏—Å—Ç–µ–º–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                VStack(spacing: 8) {
                    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                    if !isEditing {
                        HStack(spacing: 4) {
                            if person.isPositive {
                                // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - —Å–µ—Ä–¥–µ—á–∫–∏
                                ForEach(0..<Person.maxHearts, id: \.self) { index in
                                                                            Image(systemName: index < person.displayValue ? "heart.fill" : "heart")
                                            .foregroundColor(index < person.displayValue ? .red : .gray)
                                            .font(.title3)
                                            .scaleEffect(index < person.displayValue ? 1.1 : 1.0)
                                            .animation(.easeInOut(duration: 0.2), value: person.displayValue)
                                        .onTapGesture {
                                            // Haptic feedback
                                            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                                            impactFeedback.impactOccurred()
                                            
                                            // –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                                            let newValue = index + 1
                                            let updated = Person(
                                                id: person.id,
                                                name: person.name,
                                                details: person.details,
                                                hearts: newValue
                                            )
                                            onUpdate(updated)
                                        }
                                        .onLongPressGesture {
                                            // Haptic feedback
                                            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
                                            impactFeedback.impactOccurred()
                                            
                                            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                                            let updated = Person(
                                                id: person.id,
                                                name: person.name,
                                                details: person.details,
                                                hearts: -(index + 1)
                                            )
                                            onUpdate(updated)
                                        }
                                }
                            } else if person.isNegative {
                                // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - —á–µ—Ä–µ–ø–∫–∏
                                ForEach(0..<Person.maxHearts, id: \.self) { index in
                                    Image(systemName: index < person.displayValue ? "xmark.circle.fill" : "xmark.circle")
                                        .foregroundColor(index < person.displayValue ? .black : .gray)
                                        .font(.title3)
                                        .scaleEffect(index < person.displayValue ? 1.1 : 1.0)
                                        .animation(.easeInOut(duration: 0.2), value: person.displayValue)
                                        .onTapGesture {
                                            // Haptic feedback
                                            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                                            impactFeedback.impactOccurred()
                                            
                                            // –ü—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                                            let newValue = -(index + 1)
                                            let updated = Person(
                                                id: person.id,
                                                name: person.name,
                                                details: person.details,
                                                hearts: newValue
                                            )
                                            onUpdate(updated)
                                        }
                                        .onLongPressGesture {
                                            // Haptic feedback
                                            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
                                            impactFeedback.impactOccurred()
                                            
                                            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                                            let updated = Person(
                                                id: person.id,
                                                name: person.name,
                                                details: person.details,
                                                hearts: index + 1
                                            )
                                            onUpdate(updated)
                                        }
                                }
                            } else {
                                // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - –ø—É—Å—Ç—ã–µ –∫—Ä—É–≥–∏
                                ForEach(0..<Person.maxHearts, id: \.self) { index in
                                    Image(systemName: "circle")
                                        .foregroundColor(.gray)
                                        .font(.title3)
                                        .onTapGesture {
                                            // Haptic feedback
                                            let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                                            impactFeedback.impactOccurred()
                                            
                                            let newValue = index + 1
                                            let updated = Person(
                                                id: person.id,
                                                name: person.name,
                                                details: person.details,
                                                hearts: newValue
                                            )
                                            onUpdate(updated)
                                        }
                                        .onLongPressGesture {
                                            // Haptic feedback
                                            let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
                                            impactFeedback.impactOccurred()
                                            
                                            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                                            let newValue = -(index + 1)
                                            let updated = Person(
                                                id: person.id,
                                                name: person.name,
                                                details: person.details,
                                                hearts: newValue
                                            )
                                            onUpdate(updated)
                                        }
                                }
                            }
                        }
                    }
                    
                    // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã)
                    VStack(spacing: 4) {
                        Text(statusText)
                            .font(.system(.caption, design: .rounded))
                            .foregroundColor(statusColor)
                            .fontWeight(.medium)
                        
                        HStack(spacing: 8) {
                            // –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥"
                            Button(action: {
                                // Haptic feedback
                                let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                                impactFeedback.impactOccurred()
                                
                                let updated = Person(
                                    id: person.id,
                                    name: person.name,
                                    details: person.details,
                                    hearts: 4  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 4 —Å–µ—Ä–¥–µ—á–∫–∞
                                )
                                onUpdate(updated)
                            }) {
                                HStack(spacing: 4) {
                                    Image(systemName: "heart.fill")
                                        .foregroundColor(.red)
                                    Text("–î—Ä—É–≥")
                                        .foregroundColor(.red)
                                }
                                .font(.system(.caption2, design: .rounded))
                                .fontWeight(.medium)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(
                                    RoundedRectangle(cornerRadius: 8)
                                        .fill(person.isPositive ? Color.red.opacity(0.2) : Color.clear)
                                        .stroke(Color.red, lineWidth: 1)
                                )
                            }
                            .scaleEffect(person.isPositive ? 1.05 : 1.0)
                            .animation(.easeInOut(duration: 0.2), value: person.isPositive)
                            
                            // –ö–Ω–æ–ø–∫–∞ "–í—Ä–∞–≥"
                            Button(action: {
                                // Haptic feedback
                                let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                                impactFeedback.impactOccurred()
                                
                                let updated = Person(
                                    id: person.id,
                                    name: person.name,
                                    details: person.details,
                                    hearts: -4  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 4 –∫—Ä–µ—Å—Ç–∏–∫–∞
                                )
                                onUpdate(updated)
                            }) {
                                HStack(spacing: 4) {
                                    Image(systemName: "xmark.circle.fill")
                                        .foregroundColor(.black)
                                    Text("–í—Ä–∞–≥")
                                        .foregroundColor(.black)
                                }
                                .font(.system(.caption2, design: .rounded))
                                .fontWeight(.medium)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(
                                    RoundedRectangle(cornerRadius: 8)
                                        .fill(person.isNegative ? Color.black.opacity(0.2) : Color.clear)
                                        .stroke(Color.black, lineWidth: 1)
                                )
                            }
                            .scaleEffect(person.isNegative ? 1.05 : 1.0)
                            .animation(.easeInOut(duration: 0.2), value: person.isNegative)
                            
                            // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å"
                            Button(action: {
                                // Haptic feedback
                                let impactFeedback = UIImpactFeedbackGenerator(style: .light)
                                impactFeedback.impactOccurred()
                                
                                let updated = Person(
                                    id: person.id,
                                    name: person.name,
                                    details: person.details,
                                    hearts: 0
                                )
                                onUpdate(updated)
                            }) {
                                Text("–°–±—Ä–æ—Å")
                                    .font(.system(.caption2, design: .rounded))
                                    .fontWeight(.medium)
                                    .foregroundColor(.gray)
                                    .padding(.horizontal, 8)
                                    .padding(.vertical, 4)
                                    .background(
                                        RoundedRectangle(cornerRadius: 8)
                                            .fill(person.isNeutral ? Color.gray.opacity(0.2) : Color.clear)
                                            .stroke(Color.gray, lineWidth: 1)
                                    )
                            }
                            .scaleEffect(person.isNeutral ? 1.05 : 1.0)
                            .animation(.easeInOut(duration: 0.2), value: person.isNeutral)
                        }
                    }
                }
            }
            
            if isEditing {
                HStack(spacing: 16) {
                    Button("–û—Ç–º–µ–Ω–∞") {
                        isEditing = false
                        editedName = person.name
                        editedDetails = person.details
                        editedHearts = person.hearts
                    }
                    .font(.system(.body, design: .rounded))
                    .fontWeight(.medium)
                    .foregroundColor(.secondary)
                    .padding(.horizontal, 20)
                    .padding(.vertical, 12)
                    .background(
                        RoundedRectangle(cornerRadius: 10)
                            .fill(Color(.systemGray6))
                    )
                    
                    Spacer()
                    
                    Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                        let updated = Person(
                            id: person.id,
                            name: editedName,
                            details: editedDetails,
                            hearts: editedHearts
                        )
                        onUpdate(updated)
                        isEditing = false
                    }
                    .font(.system(.body, design: .rounded))
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                    .padding(.horizontal, 24)
                    .padding(.vertical, 12)
                    .background(
                        RoundedRectangle(cornerRadius: 10)
                            .fill(
                                LinearGradient(
                                    colors: [Color.orange, Color.orange.opacity(0.8)],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                            .shadow(color: Color.orange.opacity(0.3), radius: 5, x: 0, y: 2)
                    )
                }
                .padding(.horizontal, 20)
                .padding(.bottom, 20)
            }
        }
        .padding(isEditing ? 16 : 20)
        .background(
            RoundedRectangle(cornerRadius: isEditing ? 25 : 20)
                .fill(
                    isEditing ? 
                    LinearGradient(
                        colors: [
                            Color(.systemBackground),
                            Color.orange.opacity(0.02),
                            Color(.systemBackground)
                        ],
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    ) :
                    LinearGradient(
                        colors: [Color(.systemBackground)],
                        startPoint: .top,
                        endPoint: .bottom
                    )
                )
                .stroke(
                    isEditing ? 
                    LinearGradient(
                        colors: [Color.orange.opacity(0.8), Color.orange, Color.orange.opacity(0.6)],
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    ) :
                    LinearGradient(colors: [Color.clear], startPoint: .top, endPoint: .bottom),
                    lineWidth: isEditing ? 3 : 0
                )
                .shadow(
                    color: isEditing ? Color.orange.opacity(0.25) : Color.black.opacity(0.05),
                    radius: isEditing ? 20 : 10,
                    x: 0,
                    y: isEditing ? 10 : 5
                )
        )
        .animation(.easeInOut(duration: 0.3), value: isEditing)
        .frame(maxWidth: isEditing ? .infinity : nil)
        .padding(.horizontal, isEditing ? 0 : 0)
            }
        
            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if !isEditing {
                Button(action: {
                    // Haptic feedback
                    let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
                    impactFeedback.impactOccurred()
                    
                    isEditing = true
                }) {
                    Image(systemName: "pencil.circle.fill")
                        .font(.title2)
                        .foregroundColor(.orange)
                        .background(
                            Circle()
                                .fill(Color(.systemBackground))
                                .shadow(color: .black.opacity(0.1), radius: 2, x: 0, y: 1)
                        )
                }
                .padding(12)
                .scaleEffect(1.0)
                .animation(.easeInOut(duration: 0.2), value: isEditing)
            }
        }
        .contentShape(Rectangle())
        .onTapGesture {
            // –ü—É—Å—Ç–æ–π gesture –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            // –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –∫–∞—Ä–∞–Ω–¥–∞—à–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        }
    }
    
    private var statusText: String {
        if person.isPositive {
            return "–î—Ä—É–≥ (\(person.hearts))"
        } else if person.isNegative {
            return "–í—Ä–∞–≥ (\(abs(person.hearts)))"
        } else {
            return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        }
    }
    
    private var statusColor: Color {
        if person.isPositive {
            return .red
        } else if person.isNegative {
            return .black
        } else {
            return .gray
        }
    }
}

// MARK: - Add Person View
struct AddPersonView: View {
    let onAdd: (Person) -> Void
    
    @Environment(\.dismiss) private var dismiss
    @State private var name = ""
    @State private var details = ""
    @State private var hearts = 0

    var body: some View {
        NavigationStack {
            ZStack {
                // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
                Color(hex: "#fceeda")
                    .ignoresSafeArea()
                
                ScrollView {
                    VStack(spacing: 24) {
                        VStack(spacing: 20) {
                            // –ü–æ–ª–µ –∏–º–µ–Ω–∏
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–ò–º—è")
                                    .font(.system(.headline, design: .rounded))
                                    .fontWeight(.semibold)
                                
                                TextField("–í–≤–µ–¥–∏—Ç–µ –∏–º—è", text: $name)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .font(.system(.body, design: .rounded))
                            }
                            
                            // –ü–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–û–ø–∏—Å–∞–Ω–∏–µ")
                                    .font(.system(.headline, design: .rounded))
                                    .fontWeight(.semibold)
                                
                                TextField("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ", text: $details, axis: .vertical)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .font(.system(.body, design: .rounded))
                        .lineLimit(3...6)
                            }
                            
                            // –°–ª–∞–π–¥–µ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                            VStack(alignment: .leading, spacing: 12) {
                                Text("–£—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
                                    .font(.system(.headline, design: .rounded))
                                    .fontWeight(.semibold)
                                
                                VStack(spacing: 16) {
                                    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
                                    HStack(spacing: 4) {
                                        if hearts > 0 {
                                            // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                                            ForEach(0..<Person.maxHearts, id: \.self) { index in
                                                Image(systemName: index < hearts ? "heart.fill" : "heart")
                                                    .foregroundColor(index < hearts ? .red : .gray)
                                                    .font(.title2)
                                                    .onTapGesture {
                                                        hearts = index + 1
                                                    }
                                            }
                                        } else if hearts < 0 {
                                            // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                                            ForEach(0..<Person.maxHearts, id: \.self) { index in
                                                Image(systemName: index < abs(hearts) ? "xmark.circle.fill" : "xmark.circle")
                                                    .foregroundColor(index < abs(hearts) ? .black : .gray)
                                                    .font(.title2)
                                                    .onTapGesture {
                                                        hearts = -(index + 1)
                                                    }
                                            }
                                        } else {
                                            // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                                            ForEach(0..<Person.maxHearts, id: \.self) { index in
                                                Image(systemName: "circle")
                                                    .foregroundColor(.gray)
                                                    .font(.title2)
                                                    .onTapGesture {
                                                        hearts = 0
                                                    }
                                            }
                                        }
                                    }
                                    
                                    // –°–ª–∞–π–¥–µ—Ä
                                    Slider(value: Binding(
                                        get: { Double(hearts) },
                                        set: { hearts = Int($0) }
                                    ), in: Double(Person.minHearts)...Double(Person.maxHearts), step: 1)
                                    .accentColor(.orange)
                                    
                                    // –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                                    Text(statusText)
                                        .font(.system(.body, design: .rounded))
                                        .fontWeight(.medium)
                                        .foregroundColor(statusColor)
                                }
                            }
                        }
                        .padding(24)
                        .background(
                            RoundedRectangle(cornerRadius: 20)
                                .fill(Color(.systemBackground))
                                .shadow(color: Color.black.opacity(0.05), radius: 10, x: 0, y: 5)
                        )
                        .padding(.horizontal, 20)
                        
                        Spacer(minLength: 100)
                    }
                }
            }
            .navigationTitle("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–û—Ç–º–µ–Ω–∞") {
                        dismiss()
                    }
                    .foregroundColor(.secondary)
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–î–æ–±–∞–≤–∏—Ç—å") {
                        let person = Person(name: name, details: details, hearts: hearts)
                        onAdd(person)
                    }
                    .foregroundColor(.orange)
                    .fontWeight(.semibold)
                    .disabled(name.isEmpty)
                }
            }
        }
    }
    
    private var statusText: String {
        if hearts > 0 {
            return "–î—Ä—É–≥ (\(hearts))"
        } else if hearts < 0 {
            return "–í—Ä–∞–≥ (\(abs(hearts)))"
        } else {
            return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        }
    }
    
    private var statusColor: Color {
        if hearts > 0 {
            return .red
        } else if hearts < 0 {
            return .black
        } else {
            return .gray
        }
    }
}

// MARK: - Preview

struct RelationshipView_Previews: PreviewProvider {
    static var previews: some View {
    RelationshipView()
    }
}
